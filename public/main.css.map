{"version":3,"sources":["webpack://movdb2/./components/_navbar.scss","webpack://movdb2/./components/_headerCarousel.scss","webpack://movdb2/./_responsive.scss","webpack://movdb2/./components/_movieDisplay.scss","webpack://movdb2/./components/_detailPage.scss","webpack://movdb2/./components/_footer.scss","webpack://movdb2/./styles.scss"],"names":[],"mappings":"AAAA,cACC,WAGD,cACC,eCFD,kBACC,WACA,YACA,mBACA,kFAKA,kBACA,QACA,WAGD,sBACC,kBACA,QACA,SAEA,kBAEA,WACA,YAEA,yBACC,oBCqiBA,yBDhjBF,sBAeE,SCiiBA,yBDhjBF,sBAkBE,SEnCF,wBACC,aACA,eACA,uBAGD,WACC,YACA,YACA,kBACA,eAED,eACC,WAGD,uBACC,UACA,eAGD,mBACC,kBACA,aACA,WACA,YACA,eACA,gBAEA,uBACC,eACA,kBACA,aACA,sBACA,mBAGD,yBACC,eACA,6BAEA,gDACC,eACA,UAKH,iCACC,aCjDD,yBACC,aACA,uBACA,mBF8jBC,yBEjkBF,yBAME,uBF2jBA,yBEtjBD,wBAEE,aAIH,gBACC,aAGD,iBACC,WACA,gBACA,aAEA,oBACC,aACA,uBACA,mBACA,oBACA,wBACC,iBACA,WAMF,YACC,WAIF,wBACC,kBACA,aACA,WACA,YACA,eAYA,8BACC,eACA,6BAEA,qDACC,eACA,UAKH,0BACC,YFwfC,yBEnfA,QACC,eAED,QACC,gBAKH,gBACC,aACA,mBACA,uBAEA,eAEA,oBACC,WACA,iBAKD,qCACC,aACA,uBACA,eCxGF,kBACC,aACA,WCMD,EACC,SACA,UACA,sBAGD,KACC,mBAGD,mBACC,2BAGD,aACC,2B","file":"main.css","sourcesContent":[".account_icon {\r\n\twidth: 20px;\r\n}\r\n\r\n.navbar-brand {\r\n\tfont-size: 35px;\r\n}\r\n",".carousel-item {\r\n}\r\n\r\n.carousel_overlay {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground: rgb(47, 47, 47);\r\n\tbackground: linear-gradient(\r\n\t\t0deg,\r\n\t\trgba(47, 47, 47, 1) 0%,\r\n\t\trgba(61, 61, 61, 0.6951155462184874) 100%\r\n\t);\r\n\tposition: absolute;\r\n\ttop: 0px;\r\n\tbottom: 0px;\r\n}\r\n\r\n.carousel_textOverlay {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tbottom: 0;\r\n\r\n\ttext-align: center;\r\n\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\r\n\th4 {\r\n\t\tfont-weight: lighter;\r\n\t}\r\n\r\n\t@include media(\"<660px\") {\r\n\t\ttop: 30%;\r\n\t}\r\n\t@include media(\"<450px\") {\r\n\t\ttop: 10%;\r\n\t}\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n\t\"phone\": 320px,\r\n\t\"tablet\": 768px,\r\n\t\"desktop\": 1024px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n\t\"screen\": \"screen\",\r\n\t\"print\": \"print\",\r\n\t\"handheld\": \"handheld\",\r\n\t\"landscape\": \"(orientation: landscape)\",\r\n\t\"portrait\": \"(orientation: portrait)\",\r\n\t\"retina2x\":\r\n\t\t\"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\r\n\t\"retina3x\":\r\n\t\t\"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n\t\"px\": 1,\r\n\t\"em\": 0.01,\r\n\t\"rem\": 0.1,\r\n\t\"\": 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: \"desktop\" !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n\t@if feature-exists(\"at-error\") {\r\n\t\t@error $message;\r\n\t} @else {\r\n\t\t@warn $message;\r\n\t\t$_: noop();\r\n\t}\r\n\r\n\t@return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n\t@if im-log($message) {\r\n\t}\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n\t$no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n\t@if not $no-media-breakpoint-value {\r\n\t\t@if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\r\n\t\t}\r\n\t}\r\n\r\n\t@each $condition in $conditions {\r\n\t\t@if not map-has-key($media-expressions, $condition) {\r\n\t\t\t$operator: get-expression-operator($condition);\r\n\t\t\t$prefix: get-expression-prefix($operator);\r\n\t\t\t$value: get-expression-value($condition, $operator);\r\n\r\n\t\t\t@if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\r\n\t\t\t\t($prefix == \"min\" and $value > $no-media-breakpoint-value)\r\n\t\t\t{\r\n\t\t\t\t@return false;\r\n\t\t\t}\r\n\t\t} @else if not index($im-no-media-expressions, $condition) {\r\n\t\t\t@return false;\r\n\t\t}\r\n\t}\r\n\r\n\t@return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n\t@each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\r\n\t\t@if str-index($expression, $operator) {\r\n\t\t\t@return $operator;\r\n\t\t}\r\n\t}\r\n\r\n\t// It is not possible to include a mixin inside a function, so we have to\r\n\t// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t// Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n\t$_: im-log(\"No operator found in `#{$expression}`.\");\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n\t$dimension: \"width\";\r\n\r\n\t@if str-length($parsed-dimension) > 0 {\r\n\t\t$dimension: $parsed-dimension;\r\n\t}\r\n\r\n\t@return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n\t@return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n\t@if map-has-key($breakpoints, $value) {\r\n\t\t$value: map-get($breakpoints, $value);\r\n\t} @else {\r\n\t\t$value: to-number($value);\r\n\t}\r\n\r\n\t$interval: map-get($unit-intervals, unit($value));\r\n\r\n\t@if not $interval {\r\n\t\t// It is not possible to include a mixin inside a function, so we have to\r\n\t\t// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n\t\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t\t// Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n\t\t$_: im-log(\"Unknown unit `#{unit($value)}`.\");\r\n\t}\r\n\r\n\t@if $operator == \">\" {\r\n\t\t$value: $value + $interval;\r\n\t} @else if $operator == \"<\" {\r\n\t\t$value: $value - $interval;\r\n\t}\r\n\r\n\t@return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n\t// If it is part of $media-expressions, it has no operator\r\n\t// then there is no need to go any further, just return the value\r\n\t@if map-has-key($media-expressions, $expression) {\r\n\t\t@return map-get($media-expressions, $expression);\r\n\t}\r\n\r\n\t$operator: get-expression-operator($expression);\r\n\t$dimension: get-expression-dimension($expression, $operator);\r\n\t$prefix: get-expression-prefix($operator);\r\n\t$value: get-expression-value($expression, $operator);\r\n\r\n\t@return \"(#{$prefix}-#{$dimension}: #{$value})\";\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n\t@if length($list) < 1 or $start > $end {\r\n\t\t@return ();\r\n\t}\r\n\r\n\t$result: ();\r\n\r\n\t@for $i from $start through $end {\r\n\t\t$result: append($result, nth($list, $i));\r\n\t}\r\n\r\n\t@return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n\t@if type-of($value) == \"number\" {\r\n\t\t@return $value;\r\n\t} @else if type-of($value) != \"string\" {\r\n\t\t$_: im-log(\"Value for `to-number` should be a number or a string.\");\r\n\t}\r\n\r\n\t$first-character: str-slice($value, 1, 1);\r\n\t$result: 0;\r\n\t$digits: 0;\r\n\t$minus: ($first-character == \"-\");\r\n\t$numbers: (\r\n\t\t\"0\": 0,\r\n\t\t\"1\": 1,\r\n\t\t\"2\": 2,\r\n\t\t\"3\": 3,\r\n\t\t\"4\": 4,\r\n\t\t\"5\": 5,\r\n\t\t\"6\": 6,\r\n\t\t\"7\": 7,\r\n\t\t\"8\": 8,\r\n\t\t\"9\": 9,\r\n\t);\r\n\r\n\t// Remove +/- sign if present at first character\r\n\t@if ($first-character == \"+\" or $first-character == \"-\") {\r\n\t\t$value: str-slice($value, 2);\r\n\t}\r\n\r\n\t@for $i from 1 through str-length($value) {\r\n\t\t$character: str-slice($value, $i, $i);\r\n\r\n\t\t@if not(index(map-keys($numbers), $character) or $character == \".\") {\r\n\t\t\t@return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n\t\t}\r\n\r\n\t\t@if $character == \".\" {\r\n\t\t\t$digits: 1;\r\n\t\t} @else if $digits == 0 {\r\n\t\t\t$result: $result * 10 + map-get($numbers, $character);\r\n\t\t} @else {\r\n\t\t\t$digits: $digits * 10;\r\n\t\t\t$result: $result + map-get($numbers, $character) / $digits;\r\n\t\t}\r\n\t}\r\n\r\n\t@return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n\t$units: (\r\n\t\t\"px\": 1px,\r\n\t\t\"cm\": 1cm,\r\n\t\t\"mm\": 1mm,\r\n\t\t\"%\": 1%,\r\n\t\t\"ch\": 1ch,\r\n\t\t\"pc\": 1pc,\r\n\t\t\"in\": 1in,\r\n\t\t\"em\": 1em,\r\n\t\t\"rem\": 1rem,\r\n\t\t\"pt\": 1pt,\r\n\t\t\"ex\": 1ex,\r\n\t\t\"vw\": 1vw,\r\n\t\t\"vh\": 1vh,\r\n\t\t\"vmin\": 1vmin,\r\n\t\t\"vmax\": 1vmax,\r\n\t);\r\n\r\n\t@if not index(map-keys($units), $unit) {\r\n\t\t$_: im-log(\"Invalid unit `#{$unit}`.\");\r\n\t}\r\n\r\n\t@return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n\t// Save global configuration\r\n\t$global-breakpoints: $breakpoints;\r\n\t$global-media-expressions: $media-expressions;\r\n\r\n\t// Update global configuration\r\n\t$breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n\t$media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n\t@content;\r\n\r\n\t// Restore global configuration\r\n\t$breakpoints: $global-breakpoints !global;\r\n\t$media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n\t@if ($im-media-support and length($conditions) == 0) or\r\n\t\t(not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n\t{\r\n\t\t@content;\r\n\t} @else if ($im-media-support and length($conditions) > 0) {\r\n\t\t@media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\t\t\t// Recursive call\r\n\t\t\t@include media(slice($conditions, 2)...) {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",".moviedisplay_container {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: center;\r\n}\r\n\r\n.film_item {\r\n\twidth: 300px;\r\n\tmargin: 10px;\r\n\tposition: relative;\r\n\tcursor: pointer;\r\n}\r\n.film_item_img {\r\n\twidth: 100%;\r\n}\r\n\r\n.film_item_description {\r\n\topacity: 0;\r\n\ttransition: 0.3s;\r\n}\r\n\r\n.film_item_overlay {\r\n\tposition: absolute;\r\n\tpadding: 10px;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\ttransition: 0.3s;\r\n\toverflow: hidden;\r\n\r\n\tdiv {\r\n\t\tmargin-top: 5px;\r\n\t\ttext-align: center;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t&:hover {\r\n\t\ttransition: 0.3s;\r\n\t\tbackground: rgba(46, 46, 46, 0.9);\r\n\r\n\t\t.film_item_description {\r\n\t\t\ttransition: 0.4s;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.homepage_moviedisplay_container {\r\n\theight: 100vh;\r\n}\r\n",".detailPage_subcontainer {\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\r\n\t@include media(\"<1000px\") {\r\n\t\tflex-direction: column;\r\n\t}\r\n}\r\n\r\n.header__coverImage {\r\n\timg {\r\n\t\t@include media(\"<580px\") {\r\n\t\t\twidth: 250px;\r\n\t\t}\r\n\t}\r\n}\r\n.left_container {\r\n\tpadding: 10px;\r\n}\r\n\r\n.right_container {\r\n\twidth: 100%;\r\n\tmax-width: 600px;\r\n\tpadding: 20px;\r\n\r\n\th3 {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tfont-weight: lighter;\r\n\t\tsvg {\r\n\t\t\tmargin-right: 5px;\r\n\t\t\twidth: 32px;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.rating {\r\n\tsvg {\r\n\t\twidth: 32px;\r\n\t}\r\n}\r\n\r\n.detailpage_img_overlay {\r\n\tposition: absolute;\r\n\tpadding: 10px;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\ttransition: 0.3s;\r\n\r\n\t// overflow: hidden;\r\n\r\n\t// div {\r\n\t// \tmargin-top: 5px;\r\n\t// \ttext-align: center;\r\n\t// \tdisplay: flex;\r\n\t// \tflex-direction: column;\r\n\t// \talign-items: center;\r\n\t// }\r\n\r\n\t&:hover {\r\n\t\ttransition: 0.3s;\r\n\t\tbackground: rgba(46, 46, 46, 0.9);\r\n\r\n\t\t.film_item_description {\r\n\t\t\ttransition: 0.4s;\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.detailpagecast_container {\r\n\theight: 100%;\r\n}\r\n\r\n.row {\r\n\t@include media(\"<580px\") {\r\n\t\th6 {\r\n\t\t\tfont-size: 12px;\r\n\t\t}\r\n\t\th5 {\r\n\t\t\tfont-size: 10px;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.addToFavorites {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tcursor: pointer;\r\n\r\n\tsvg {\r\n\t\twidth: 32px;\r\n\t\tmargin-right: 5px;\r\n\t}\r\n}\r\n\r\n.homePage__popularMovieContainer {\r\n\tdiv {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n}\r\n",".footer_container {\r\n\theight: 100px;\r\n\twidth: 100%;\r\n}\r\n","@import \"./responsive\";\r\n// Components\r\n@import \"./components/navbar\";\r\n@import \"./components/headerCarousel\";\r\n@import \"./components/movieDisplay\";\r\n@import \"./components/detailPage\";\r\n@import \"./components/footer\";\r\n\r\n* {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tbox-sizing: border-box;\r\n}\r\n\r\nbody {\r\n\tbackground: rgb(47, 47, 47);\r\n}\r\n\r\n.notfoundcontainer {\r\n\theight: calc(100vh - 200px);\r\n}\r\n\r\n.height_view {\r\n\theight: calc(100vh - 250px);\r\n}\r\n"],"sourceRoot":""}